from argparse import ArgumentParser
from argparse import Namespace
import yaml
def get_args():
    parser = ArgumentParser(description='ReFOCS')
    parser.add_argument('--config',help='configuration file.*yml',type=str,required=False,default='miniimagenet.yml')
    parser.add_argument('--seed',       type=int,   default=42,  help='Random seed')
    parser.add_argument('--dataset',    type=str,   default='gtsrb', help='dataset to use [gtsrb, gtsrb2TT100K, belga2flickr, belga2toplogo, miniimagenet]')
    parser.add_argument('--exp',        type=str,   default='exp_list',     help='training scenario')
    parser.add_argument('--backbone',  type=str,   default='conv_layers',     help='backbone [conv_layers, MLP, resnet18, resnet12, resnet152, custom_resnet12]')
    parser.add_argument('--metric',  type=str,   default='cosine',     help='distance metric, [euclidean,cosine] (default:cosine)')
    parser.add_argument('--model_id', type=str,   default='1',     help='model save number and/or type')
    parser.add_argument('--entropy', type=bool,  default=False,  help='Open set entropy loss (default: False)')
    parser.add_argument('--recon', type=str,  default='ce',  help='VPE reconstruction loss (ce,l2,l1) (default: ce)')
    parser.add_argument('--trainer_type',    type=str,   default='normal', help='type of training mode [normal, ae, no_recon, bifurcated,proto]') 
    parser.add_argument('--tester_type',    type=str,   default='normal', help='type of testing mode [normal, ae, no_recon, bifurcated,proto]')
    parser.add_argument('--stn', type=bool, default=False, help='spatial transformer for conv layers')
    parser.add_argument('--weighted_mean', action='store_true', help='type of prototype mean (simple or weighted)')
    parser.add_argument('--emb_enhance', action='store_true', help='enhancing the embedding')
    parser.add_argument('--pretrain', action='store_true', help='pretrain encoder [true/false]')
    parser.add_argument('--temperature', action='store_true', help='learnable temperature parameter')
    parser.add_argument('--val_check', type=int,default=500, help='episode interval for model validation [default:500]')

    parser.add_argument('--conv_hid_layers', nargs='+' , type=int, default=[100,150,250],    help='conv backbone hidden layer channels (default: [100,150,250])')
    parser.add_argument('--enc_conv_filters', nargs='+' , type=int, default=[7,4,4],    help='conv backbone filter sizes(default: [7,4,4])')
    parser.add_argument('--dec_conv_filters', nargs='+' , type=int, default=[3,3,3],    help='conv decoder filter sizes(default: [3,3,3])')
    parser.add_argument('--linear_embedding', action='store_true', help='Linear embedding or not (default:true)')
    parser.add_argument('--linear_embedding_size', type=int, default=16000, help='Linear embedding size (default:16000)')
    parser.add_argument('--z_dim', type=int, default=300, help='latent code size (default:300)')
    parser.add_argument('--mlp_hid_layers', nargs='+' ,type=float,  default=[256,128,64],    help='MLP backbone hidden layer channels (default: [256,128,64])')
    parser.add_argument('--mlp_inp_dim', nargs='+' ,  default=512,    help='Input dimension for MLP backbone (default: 512)')
    parser.add_argument('--schedular', nargs='+' ,type=float,  default=[],    help='episodic lr schedular(default: None)')
    parser.add_argument('--lr_gamma', type=float,default=0.1, help='schedular lr gamma [default:0.1]')

    parser.add_argument('--enc_stride', type=int, default=2, help='conv backend strides (default:2)')
    parser.add_argument('--ab_module_layers', nargs='+',type=int,   default=[200,100],    help='abnomrmality module hidden layer sizes(default: [200,100])')
    parser.add_argument('--lambdas', nargs='+', type=float,default=[1e-4,10,10], help='regularization parameters (vae,classify,novelty,entropy) (default:[1e-4,10,10])')
    parser.add_argument('--episodes_per_epoch_train', type=int, default=20, help='Episodes per epoch training(default: 20)')
    parser.add_argument('--episodes_val', type=int, default=500, help='Episodes per epoch validation(default: 500)')
    parser.add_argument('--episodes_test', type=int, default=500, help='Episodes per epoch testing(default: 500)')
    parser.add_argument('--k', type=int, default=5, help='Size of support set (default: 5)')
    parser.add_argument('--q', type=int, default=10, help='Size of query set (default: 10)')
    parser.add_argument('--n', type=int, default=5, help='Number of classes per episode of training (default: 5 way)')
    parser.add_argument('--epoch', type=int, default=30, help='Number of epochs (default: 30)')
    parser.add_argument('--lr', type=float, default=1e-4, help='Learning rate (default: 1e-4)')
    parser.add_argument('--output_dir',type=str,   default='/home/eegrad/snag/Desktop/fs_ood/src/models/output/',     help='output directory ')
    parser.add_argument('--img_cols',   type=int,   default=64,  help='resized image width')
    parser.add_argument('--img_rows',   type=int,   default=64,  help='resized image height')
    parser.add_argument('--workers',    type=int,   default=2,   help='Data loader workers')
    args = parser.parse_args()

    opts = vars(args)
    args = yaml.safe_load(open('configs/'+args.config))
    opts.update(args)
    args = Namespace(**opts)
    args.lr = float(args.lr)
    if args.lr_decoder is not None:
        args.lr_decoder = float(args.lr_decoder)
    # args.lr_backbone = float(args.lr_backbone)
    # args.weight_decay = float(args.weight_decay)
    return args